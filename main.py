import streamlit as st 
import pandas as pd

# Define o t√≠tulo que aparece no topo do painel
st.title("Dashboard Final: Lista de pa√≠ses por Popula√ß√£o")

# Carrega o arquivo CSV com os dados da popula√ß√£o
# Se o CSV usar outro separador, √© s√≥ mudar o par√¢metro sep
df = pd.read_csv("dados/output.csv", sep=",")

# Renomeia a coluna "Estimativa da ONU" para "Popula√ß√£o" para facilitar o uso
df.rename(columns={'Estimativa da ONU': 'Popula√ß√£o'}, inplace=True)

# Mostra o t√≠tulo para a tabela dos dados originais
st.subheader("üìä Dados Originais")
# Exibe os dados carregados em uma tabela interativa
st.dataframe(df)

# Limpa os dados para garantir que n√∫meros estejam no formato correto
# Remove pontos, v√≠rgulas, espa√ßos e tenta transformar em n√∫meros
for col in df.columns:
    df[col] = df[col].astype(str)\
                     .str.replace(".", "", regex=False)\
                     .str.replace(",", "", regex=False)\
                     .str.replace(" ", "", regex=False)
    df[col] = pd.to_numeric(df[col], errors='ignore')

# Cria um cabe√ßalho na barra lateral para os filtros
st.sidebar.header("Filtros")

# Filtro 1: Caixa de texto para buscar pa√≠s pelo nome (ou parte do nome)
filtro_texto = st.sidebar.text_input("Buscar pa√≠s (parte do nome):")

# Filtro 2: Caixa para selecionar somente pa√≠ses com popula√ß√£o maior que 100 milh√µes
filtro_pop_100mi = st.sidebar.checkbox("Mostrar s√≥ pa√≠ses com popula√ß√£o > 100 milh√µes")

# Filtro 3: Controle deslizante para escolher um intervalo m√≠nimo e m√°ximo de popula√ß√£o
min_pop = int(df['Popula√ß√£o'].min())
max_pop = int(df['Popula√ß√£o'].max())
filtro_pop_slider = st.sidebar.slider(
    "Intervalo de popula√ß√£o:",
    min_value=min_pop,
    max_value=max_pop,
    value=(min_pop, max_pop)
)

# Aplica os filtros na c√≥pia dos dados
df_filtrado = df.copy()

# Se o filtro de texto tiver algo escrito, filtra pelos pa√≠ses que cont√©m o texto (sem diferenciar mai√∫sculas/min√∫sculas)
if filtro_texto:
    df_filtrado = df_filtrado[df_filtrado['Pa√≠s (ou territ√≥rio dependente)'].str.contains(filtro_texto, case=False, na=False)]

# Se o filtro do checkbox estiver marcado, mostra s√≥ pa√≠ses com popula√ß√£o maior que 100 milh√µes
if filtro_pop_100mi:
    df_filtrado = df_filtrado[df_filtrado['Popula√ß√£o'] > 100_000_000]

# Aplica filtro pelo intervalo de popula√ß√£o selecionado no slider
df_filtrado = df_filtrado[
    (df_filtrado['Popula√ß√£o'] >= filtro_pop_slider[0]) &
    (df_filtrado['Popula√ß√£o'] <= filtro_pop_slider[1])
]

# Mostra quantos pa√≠ses foram filtrados e a tabela com esses dados filtrados
st.subheader(f"üìä Dados Filtrados ({len(df_filtrado)} pa√≠ses)")
st.dataframe(df_filtrado)

# Exibe algumas estat√≠sticas b√°sicas sobre os pa√≠ses filtrados
st.subheader("üìà Estat√≠sticas")
col1, col2, col3 = st.columns(3)  # Divide a √°rea em 3 colunas

with col1:
    st.metric("Total de Pa√≠ses", len(df_filtrado))  # Quantidade total de pa√≠ses no filtro

with col2:
    # Soma total da popula√ß√£o dos pa√≠ses filtrados
    if 'Popula√ß√£o' in df_filtrado.columns:
        st.metric("Popula√ß√£o Total", f"{df_filtrado['Popula√ß√£o'].sum():,.0f}".replace(",", "."))

with col3:
    # M√©dia da popula√ß√£o entre os pa√≠ses filtrados
    if 'Popula√ß√£o' in df_filtrado.columns:
        st.metric("Popula√ß√£o M√©dia", f"{df_filtrado['Popula√ß√£o'].mean():,.0f}".replace(",", "."))

# Gr√°fico dos 10 pa√≠ses mais populosos entre os filtrados
if 'Popula√ß√£o' in df_filtrado.columns and 'Pa√≠s (ou territ√≥rio dependente)' in df_filtrado.columns:
    df_top = df_filtrado.sort_values(by="Popula√ß√£o", ascending=False).head(10)
    st.subheader("üîù Top 10 Pa√≠ses por Popula√ß√£o (Filtrado)")
    st.bar_chart(df_top.set_index("Pa√≠s (ou territ√≥rio dependente)")["Popula√ß√£o"])
else:
    st.write("Nenhum pa√≠s encontrado com os filtros aplicados.")

# Gr√°fico dos 5 pa√≠ses menos populosos entre os filtrados
if 'Popula√ß√£o' in df_filtrado.columns and 'Pa√≠s (ou territ√≥rio dependente)' in df_filtrado.columns:
    df_menores = df_filtrado.sort_values(by="Popula√ß√£o", ascending=True).head(5)
    st.subheader("üîΩ 5 Pa√≠ses Menos Populosos (Filtrado)")
    st.bar_chart(df_menores.set_index("Pa√≠s (ou territ√≥rio dependente)")["Popula√ß√£o"])
